/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* head){
        ListNode *prev=nullptr, *curr=head; 
        ListNode* next;
        while(curr!=NULL){
            next = curr->next;
            curr->next=prev;
            prev = curr;   
            curr = next;
            
        }
        return prev;
    }

    bool isIdentical(ListNode* head, ListNode* heads){
        while(head && heads){
            if(head->val != heads->val)    return false;
            head= head ->next;
            heads=heads->next;
        }
        return true;
    }

    bool isPalindrome(ListNode* head) {
        ListNode *slow = head;
        ListNode *fast = head;

        while(fast->next && fast->next->next){
            slow = slow->next;
            fast= fast->next->next;
        }

        ListNode* heads = reverse(slow->next);
        slow->next = nullptr;
        bool ret = isIdentical(head,heads);
        slow->next = reverse(heads);
        return ret;
    }
};
