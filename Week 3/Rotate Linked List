/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* head, ListNode* tail){
        ListNode* curr,*prev,*front;
        curr = head;  prev = nullptr;
        while(curr != tail){
            front = curr->next;
            curr->next = prev;
            prev = curr;  curr = front;
        }
        return prev;
    }

    ListNode* KthNode(ListNode* head, int k){
        for(int i=0; i<k; i++)
            head= head->next;
        return head;
    }

    int length(ListNode* head){
        int count=0;
        while(head){
            head= head->next;
            count++;
        }
        return count;
    }

    ListNode* rotateRight(ListNode* head, int k) {
        int n = length(head);
        if(head == NULL || k%n==0)   return head;
        head = reverse(head,nullptr);
        ListNode *Kth = KthNode(head,k%n);
        //ListNode front = Kth->next;
        ListNode* temp = reverse(head, Kth);
        ListNode* head2 = reverse(Kth, nullptr);
        head->next = head2;
        return temp;
    }
};
